package headStackMethodArea;

public class AppClass {//运行时，jvm把appmain的信息放入方法区

	public AppClass() {
		// TODO Auto-generated constructor stub
	}
	/**
	 * 堆区：
	 * 1.存储的全部是对象，每个对象都包含一个与之对应的class的信息。（class的目的是得到操作指令）
	 * 2.jvm只有一个堆区（heap）被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本省
	 * 栈区：
	 * 1.每个线程包含一个栈区，栈中只保存基础数据类型的对象和自定义队形的引用（不是对象），对象都存放在堆区
	 * 中
	 * 2.每个栈中的数据（原始类型和对象引用）都是私有的，其他栈不能访问。
	 * 3.栈分为3个部分，基本类型变量区、执行环境上下文、操作指令区（存放操作指令）
	 * 方法区：
	 * 1.又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的class和static变量。
	 * 2.方法区中包含的都是在整个程序中永远唯一的元素，如class，static变量。
	 * https://www.cnblogs.com/cmfwm/p/7671188.html
	 * */
	public static void main(String[] args) {//main方法本省放入方法区
		Sample test1 = new Sample("测试1");  //test1是引用，所以放到栈区里面
		Sample test2 = new Sample("测试2");  // Sample是自定义对象应该放到堆里面
		test1.printName();
		test2.printName();
		
	}
	
	/*
	 * 1系统受到了我们发出的指令，启动了一个java虚拟机进程，这个进程首先从classpath中找到AppMain.class文件，读取这个文件中
	 * 的二进制数据，然后把Appmain类的类信息存放到运行时数据区的方法区中。这一过程称为AppMain类的加载过程
	 * 2.接着，java虚拟机定位到方法区中AppMain类的Main（）方法的字节码，开始执行它的指令。这个main()方法的第一条语句就是:
	 * Sample test1 = new Sample("测试1");
	 * 语句检点，就是让java虚拟机创建一个Sample实例，并且呢，使引用变量test1引用这个实例。貌似小case一桩，就让我们来跟中一下java虚拟机看看它究竟是怎么来执行
	 * 这个任务的：
	 * 1.java虚拟机一看，不就是建立一个sample实例嘛，简单，于是就直奔方法区而去，先找到sample类的类型信息再说。结果呢，嘿嘿，没有找到，这会儿的方法区里面还没有Sample
	 * 类呢，可java虚拟机也不是一根筋的笨蛋，于是，它发扬自己动手，分一组是的作风，立马加载了sample类，吧sample类的类型信息存放在方法区里。
	 * 2.资料找到了，下面就开始干活啦。java虚拟机做的第一件事情就是在堆区中为一个新的sample实例分配内存，这个sample实例持有着执行方法区Sample类的类型
	 * 信息引用。这里所说的引用，实际上指的是Sample类的类型信息在方法区中的内存地址，其实，就是有点类似于c语言里的指针啦，而这个地址呢，就存放在Sample
	 * 实例的数据区里。
	 * 3.在java虚拟机进程中，每个线程都会拥有一个方法调用栈，用来跟踪线程运行中一系列的方法调用过程，栈中的每一个元素就被称为栈帧，每当线程调用一个方法的时候
	 * 就会向方法栈压如一个新帧。这里的帧用来存储方法的参数、局部变量和运算过程中的临时数据。OK，原理讲完了，就让我们来继续我们的跟踪行动！位于“=”前的test1
	 * 是一个在main（）方法中定义的变量，可见，它是一个局部变量，因此，它会被添加到了执行main（）方法的主线程的java方法调用栈中。而=将把这个test1
	 * 变量指向堆区中的Sample实例，也就是说，它持有指向Sample实例的引用。
	 * OK，到此为止，java虚拟机就完成了这个简单语句的执行任务。参考我们的行动向导图，我们终于初步摸清了java虚拟机的一点点底细了，cool！
	 * 接下来，java虚拟机将继续执行后续指令，在堆区里继续创建一个Sample实例，然后依次执行他们的printName（）方法。当java虚拟机执行
	 * test1.printName（）方法时，java虚拟机根据局部变量test1持有的引用，定位到堆区中的Sample实例，在根据Sample实例持有的引用，定位到方法区
	 * 中sample类的类型信息，从而获得printName（）方法的字节码，接着执行printName（）方法包含的指令。
	 * 
	 * 三、
	 * 在windows中使用taskmanager查看java进程使用的内存时，发现有时候会超过-Xmx制定的内存大小，-XMx制定的是 java heap，java还要分配内存做其他
	 * 事情，包括为每个线程建立栈。
	 * 
	 * VM的每个线程都有自己的栈空间，栈空间的大小限制vm的线程数，太大了，实用的线程数减少，太小容易抛出java.lang.StackOverflowError 异常。
	 * windows默认为1M，linux必须运行ulimit -S 2048.
	 * 在C语言里堆(heap)和栈(stack)里的区别
	 * 简单的可以理解为：
	 * heap:由malloc之类函数分配的空间所在地。地址是由低向高增长的。
	 * stack:是自动分配变量，以及函数调用的时候所使用的一些空间。地址是由高向低减少。
	 * 一个有c/c++编译的程序占用的内存分为以下几个部分
	 * 1.栈区（stack）-由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。
	 * 2.在java于艳丽堆heap和stack里的区别
	 *   1.stack与heap都是java用来在ram中存放数据的地方。与c++不同，java自动管理栈和堆，程序员不能直接地设置栈或堆。
	 *   2.栈的优势是，存取速度比堆跨，仅此于直接位于cpu中的积存其。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。另外，栈数据可以共享
	 *   堆的优势是可以动态地分配内存大小，生存期也不必事先告诉编译器，java的垃圾回收器会自动收走这些不再使用的数据。但缺点是，由于要在运行时动态
	 *   分配内存。存取速度较慢。
	 *   3.java 中的数据类型有两中。
	 *      一种是基本类型 8中 int,short,long,byte,float,double,boolean,char（注意，并没有string的基本类型）。这种类型定义是通过
	 *      诸如int a = 3；long b = 255l；的形式来定义的，称为自动变量。值得注意的是，自动变量存的是字面值，不是类的实例，即不是类的引用，
	 *      这里并没有类的存在。如 int a = 3；这里的 a 是一个指定int 类型的引用，指向3这个字面值。这些字面值的数据，由于大小可知，生存周期可知，出
	 *      于最求速度的原因，就存在于栈中。
	 *      
	 *      另外，栈有一个很重要的特殊性，就是存在栈中的数据可以共享。假设我们同事定义
	 *      int a = 3；
	 *      int b = 3；
	 *      编译器先处理int a = 3；首先它会在栈中创建一个变量为a的引用，然后查找有没有字面值为3的地址，没找到，就开辟一个存放3这个字面值的地址，然后将a指向3的地址。接着处理int b = 3；在创建完b的引用变量后，由于在栈中已经有3这个字面值，便将b直接指向3的地址。这样，就出现了a与b同时均指向3的情况。 
	 *　特别注意的是，这种字面值的引用与类对象的引用不同。假定两个类对象的引用同时指向一个对象，如果一个对象引用变量修改了这个对象的内部状态，那么另一个对象引用变量也即刻反映出这个变化。相反，通过字面值的引用来修改其值，不会导致另一个指向此字面值的引用的值也跟着改变的情况。如上例，我们定义完a与 b的值后，再令a=4；那么，b不会等于4，还是等于3。在编译器内部，遇到a=4；时，它就会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向这个地址。因此a值的改变不会影响到b的值。 
	 *另一种是包装类数据，如Integer, String, Double等将相应的基本数据类型包装起来的类。这些类数据全部存在于堆中，Java用new()语句来显示地告诉编译器，在运行时才根据需要动态创建，因此比较灵活，但缺点是要占用更多的时间。 
	 *4.每个JVM的线程都有自己的私有的栈空间，随线程创建而创建，java的stack存放的是frames ，java的stack和c的不同，只是存放本地变量，返回值和调用方法，不允许直接push和pop frames ，因为frames 可能是有heap分配的，所以j为ava的stack分配的内存不需要是连续的。java的heap是所有线程共享的，堆存放所有 runtime data ，里面是所有的对象实例和数组，heap是JVM启动时创建。 
	 * 5. String是一个特殊的包装类数据。即可以用String str = new String("abc");的形式来创建，也可以用String str = "abc"；的形式来创建(作为对比，在JDK 5.0之前，你从未见过Integer i = 3;的表达式，因为类与字面值是不能通用的，除了String。而在JDK 5.0中，这种表达式是可以的！因为编译器在后台进行Integer i = new Integer(3)的转换)。前者是规范的类的创建过程，即在Java中，一切都是对象，而对象是类的实例，全部通过new()的形式来创建。Java 中的有些类，如DateFormat类，可以通过该类的getInstance()方法来返回一个新创建的类，似乎违反了此原则。其实不然。该类运用了单例模式来返回类的实例，只不过这个实例是在该类内部通过new()来创建的，而getInstance()向外部隐藏了此细节。那为什么在String str = "abc"；中，并没有通过new()来创建实例，是不是违反了上述原则？其实没有。 
	 *  5. 关于String str = "abc"的内部工作。Java内部将此语句转化为以下几个步骤： 
　　(1)先定义一个名为str的对String类的对象引用变量：String str； 
　　(2)在栈中查找有没有存放值为"abc"的地址，如果没有，则开辟一个存放字面值为"abc"的地址，接着创建一个新的String类的对象o，并将o 的字符串值指向这个地址，而且在栈中这个地址旁边记下这个引用的对象o。如果已经有了值为"abc"的地址，则查找对象o，并返回o的地址。 
　　(3)将str指向对象o的地址。 
　　值得注意的是，一般String类中字符串值都是直接存值的。但像String str = "abc"；这种场合下，其字符串值却是保存了一个指向存在栈中数据的引用！ 
        为了更好地说明这个问题，我们可以通过以下的几个代码进行验证。 
　　String str1 = "abc"; 
　　String str2 = "abc"; 
　　System.out.println(str1==str2);  //true 
　　注意，我们这里并不用str1.equals(str2)；的方式，因为这将比较两个字符串的值是否相等。==号，根据JDK的说明，只有在两个引用都指向了同一个对象时才返回真值。而我们在这里要看的是，str1与str2是否都指向了同一个对象。 
　　结果说明，JVM创建了两个引用str1和str2，但只创建了一个对象，而且两个引用都指向了这个对象。 
　　我们再来更进一步，将以上代码改成： 
　　String str1 = "abc"; 
　　String str2 = "abc"; 
　　str1 = "bcd"; 
　　System.out.println(str1 + "," + str2);  //bcd, abc 
　　System.out.println(str1==str2);  //false 
　　这就是说，赋值的变化导致了类对象引用的变化，str1指向了另外一个新对象！而str2仍旧指向原来的对象。上例中，当我们将str1的值改为"bcd"时，JVM发现在栈中没有存放该值的地址，便开辟了这个地址，并创建了一个新的对象，其字符串的值指向这个地址。 
　　事实上，String类被设计成为不可改变(immutable)的类。如果你要改变其值，可以，但JVM在运行时根据新值悄悄创建了一个新对象，然后将这个对象的地址返回给原来类的引用。这个创建过程虽说是完全自动进行的，但它毕竟占用了更多的时间。在对时间要求比较敏感的环境中，会带有一定的不良影响。 
　　再修改原来代码： 
　　String str1 = "abc"; 
　　String str2 = "abc"; 
　　str1 = "bcd"; 
　　String str3 = str1; 
　　System.out.println(str3);  //bcd 
　　String str4 = "bcd"; 
　　System.out.println(str1 == str4);  //true 
　　str3 这个对象的引用直接指向str1所指向的对象(注意，str3并没有创建新对象)。当str1改完其值后，再创建一个String的引用str4，并指向因str1修改值而创建的新的对象。可以发现，这回str4也没有创建新的对象，从而再次实现栈中数据的共享。 
　　我们再接着看以下的代码。 
　　String str1 = new String("abc"); 
　　String str2 = "abc"; 
　　System.out.println(str1==str2);  //false 
　　创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。 
　　String str1 = "abc"; 
　　String str2 = new String("abc"); 
　　System.out.println(str1==str2);  //false 
　　创建了两个引用。创建了两个对象。两个引用分别指向不同的两个对象。 
　　以上两段代码说明，只要是用new()来新建对象的，都会在堆中创建，而且其字符串是单独存值的，即使与栈中的数据相同，也不会与栈中的数据共享。 
　　6. 数据类型包装类的值不可修改。不仅仅是String类的值不可修改，所有的数据类型包装类都不能更改其内部的值。 
　　7. 结论与建议： 
　　(1)我们在使用诸如String str = "abc"；的格式定义类时，总是想当然地认为，我们创建了String类的对象str。担心陷阱！对象可能并没有被创建！唯一可以肯定的是，指向 String类的引用被创建了。至于这个引用到底是否指向了一个新的对象，必须根据上下文来考虑，除非你通过new()方法来显要地创建一个新的对象。因此，更为准确的说法是，我们创建了一个指向String类的对象的引用变量str，这个对象引用变量指向了某个值为"abc"的String类。清醒地认识到这一点对排除程序中难以发现的bug是很有帮助的。 
　　(2)使用String str = "abc"；的方式，可以在一定程度上提高程序的运行速度，因为JVM会自动根据栈中数据的实际情况来决定是否有必要创建新对象。而对于String str = new String("abc")；的代码，则一概在堆中创建新对象，而不管其字符串值是否相等，是否有必要创建新对象，从而加重了程序的负担。这个思想应该是享元模式的思想，但JDK的内部在这里实现是否应用了这个模式，不得而知。 
　　(3)当比较包装类里面的数值是否相等时，用equals()方法；当测试两个包装类的引用是否指向同一个对象时，用==。 
　　(4)由于String类的immutable性质，当String变量需要经常变换其值时，应该考虑使用StringBuffer类，以提高程序效率。如果java不能成功分配heap的空间，将抛出OutOfMemoryError
	 *   
	 *   
	 * 
	 * */
	
	
	
	
	
	
	
	

}
